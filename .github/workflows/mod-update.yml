name: Update Hugo Dependencies

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *' # Run daily at 03:00 AM

permissions:
  contents: write
  pull-requests: write

jobs:
  update-mod:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Step 3: Install npm dependencies
      - name: Install npm
        run: npm install

      # Step 4: Update Hugo module dependencies
      - name: Update Hugo module dependencies
        id: mod-updates
        run: |
          MOD_OUTPUT=$(npm run mod:update 2>&1)
          echo "$MOD_OUTPUT"
          MOD_UPDATES=$(echo "$MOD_OUTPUT" | grep '^go: upgraded' | sed 's/go: / - /' | sort -u)
          echo "MOD_UPDATES<<EOF" >> $GITHUB_OUTPUT
          echo "$MOD_UPDATES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 5: Commit and push changes to a new branch
      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b hugo-mod-dependencies
          git add go.mod go.sum
          if git diff-index --quiet HEAD; then
            echo "No changes to commit"
          else
            git commit -m "fix: update Hugo module dependencies"
            git push origin hugo-mod-dependencies || echo "Branch already exists"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Create Pull Request
      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = "hugo-mod-dependencies";

            try {
              // Check for existing PRs with the branch name
              const existingPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branchName}`,
                state: "open",
              });

              if (existingPRs.data.length > 0) {
                core.info("A pull request for this branch already exists. Skipping PR creation.");
              } else {
                // Create a new pull request
                const { data: pullRequest } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: "Update Hugo module dependencies",
                  head: branchName,
                  base: "main",
                  body: "This PR updates Hugo module dependencies automatically."
                });
                core.info(`Pull request created: ${pullRequest.html_url}`);
              }
            } catch (error) {
              core.setFailed(`Failed to create pull request: ${error.message}`);
            }